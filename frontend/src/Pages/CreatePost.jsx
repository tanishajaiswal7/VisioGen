import React, { useState } from "react";
import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';
import { Formfeild, Loader } from "../Components";
import { useNavigate } from "react-router-dom";
import { preview } from "../assets";
import { GetRandomPrompt } from "../Utils";

const CreatePost = () => {
  const [loading, setloading] = useState(false);
  const Navigate = useNavigate();
  const [Form, setForm] = useState({
    name: "",
    prompt: "",
    picture: "",
    width: 512,
    height: 512,
  });
  const [GeneratingImg, setGeneratingImg] = useState(false);
  // Voice prompt state
  const [voicePromptEnabled, setVoicePromptEnabled] = useState(false);
  const {
    transcript,
    listening,
    resetTranscript,
    browserSupportsSpeechRecognition
  } = useSpeechRecognition();
  const GenerateIMG = async () => {
    if (Form.prompt) {
      try {
        setGeneratingImg(true);
        const response = await fetch("http://localhost:8080/api/v1/aiImage", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            prompt: Form.prompt,
            width: Form.width,
            height: Form.height,
          }),
        });

        const data = await response.json();
        if (response.ok && data.photo) {
          setForm({ ...Form, picture: data.photo });
        } else {
          alert(data.error || "Failed to generate image");
        }
      } catch (err) {
        alert(err);
      } finally {
        setGeneratingImg(false);
      }
    } else {
      alert("Please provide proper prompt");
    }
  };
  const handlesubmit = async (e) => {
    e.preventDefault();
    if (Form.prompt && Form.picture) {
      setloading(true);
      console.log("running");
      try {
        const Response = await fetch("http://localhost:8080/api/v1/post", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ ...Form }),
        });
        await Response.json();
        console.log(Response);
        Navigate("/");
      } catch (error) {
        console.log(error);
      } finally {
        setloading(false);
      }
    } else {
      alert("Please Enter Prompt and Generate The Image");
    }
  };
  const handleChange = (e) => {
    setForm({ ...Form, [e.target.name]: e.target.value });
  };

  // Handle voice prompt toggle
  const handleVoicePromptToggle = () => {
    setVoicePromptEnabled((prev) => !prev);
    resetTranscript();
  };

  // When transcript changes and voice prompt is enabled, update prompt
  React.useEffect(() => {
    if (voicePromptEnabled && transcript) {
      setForm((prev) => ({ ...prev, prompt: transcript }));
    }
  }, [transcript, voicePromptEnabled]);
  const handleIsSupriseME = () => {
    const Suprise = GetRandomPrompt();
    setForm({ ...Form, prompt: Suprise });
  };
  return (
    <section className=" max-w-7xl mx-auto">
      <div className="flex flex-col sm:flex-row sm:justify-between items-center mb-4">
        <div>
          <h1 className=" font-extrabold text-[#fbfdf6] text-[32px]">Create</h1>
          <p className=" mt-2 text-gray-400 text-[16px] max-w[500px]">
            Create Visually Stunning AI Images Generated By VisioGen
          </p>
        </div>
        <div className="flex gap-2 mt-4 sm:mt-0">
          <button onClick={() => Navigate("/")} className="bg-blue-500 text-white px-4 py-2 rounded font-medium">Home</button>
          <button onClick={() => Navigate("/about")} className="bg-gray-700 text-white px-4 py-2 rounded font-medium">About Us</button>
        </div>
      </div>
      {/* Voice Prompt Toggle */}
      <div className="flex items-center gap-3 mb-4">
        <label className="text-white font-medium text-lg flex items-center">
          <input
            type="checkbox"
            checked={voicePromptEnabled}
            onChange={handleVoicePromptToggle}
            className="mr-2 accent-blue-500"
          />
          Enable Voice Prompt
        </label>
        {voicePromptEnabled && !browserSupportsSpeechRecognition && (
          <span className="text-red-500 ml-2">Browser does not support speech recognition.</span>
        )}
      </div>
      <form className=" max-w-3xl mt-8" onSubmit={handlesubmit}>
        <div className=" flex flex-col gap-5">
          {/* Image size selection */}
          <div className="flex gap-4 items-center">
            <label className="text-white font-medium">Image Size:</label>
            <select
              className="rounded px-2 py-1 bg-gray-700 text-white"
              value={`${Form.width}x${Form.height}`}
              onChange={e => {
                const [w, h] = e.target.value.split('x').map(Number);
                setForm(f => ({ ...f, width: w, height: h }));
              }}
            >
              <option value="512x512">512x512</option>
              <option value="768x768">768x768</option>
              <option value="1024x1024">1024x1024</option>
            </select>
          </div>
          <Formfeild
            LabelName="Enter your name"
            name="name"
            type="text"
            placeholder="Enter Your Name"
            handleChange={handleChange}
            value={Form.name}
          />
          <Formfeild
            LabelName="Prompt"
            name="prompt"
            type="text"
            placeholder="A comic book cover of a superhero wearing headphones"
            handleChange={handleChange}
            value={Form.prompt}
            IsSupriseME
            handleIsSupriseME={handleIsSupriseME}
            disabled={voicePromptEnabled}
          />
          {/* Voice prompt controls */}
          {voicePromptEnabled && browserSupportsSpeechRecognition && (
            <div className="flex items-center gap-3 bg-gray-800 p-3 rounded-lg">
              <button
                type="button"
                onClick={() => {
                  if (!listening) {
                    SpeechRecognition.startListening({ language: 'en-IN', continuous: false });
                  } else {
                    SpeechRecognition.stopListening();
                  }
                }}
                className={`px-4 py-2 rounded font-medium text-white ${listening ? 'bg-red-500' : 'bg-blue-500'}`}
              >
                {listening ? 'Stop Recording' : 'Start Recording'}
              </button>
              <span className="text-gray-200 text-sm">{transcript ? `Heard: "${transcript}"` : listening ? 'Listening...' : 'Click to speak your prompt'}</span>
              {transcript && (
                <button
                  type="button"
                  onClick={resetTranscript}
                  className="ml-2 px-2 py-1 bg-gray-600 text-white rounded text-xs"
                >
                  Clear
                </button>
              )}
            </div>
          )}
        </div>
        <div className=" mt-5 relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 h-64 p-3 flex justify-center items-center">
          {Form.picture ? (
            <img
              className=" w-full object-contain h-full"
              src={Form.picture}
              alt={Form.prompt}
            />
          ) : (
            <img
              className=" w-9/12 h-9/12 object-contain opacity-40"
              src={preview}
              alt="preview"
            />
          )}
          {GeneratingImg && (
            <div className=" absolute z-0 inset-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
              <Loader />
            </div>
          )}
        </div>
        <div className=" mt-5 gap-5 flex">
          <button
            className=" text-white bg-blue-500 font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5"
            type="button"
            onClick={GenerateIMG}
          >
            {GeneratingImg ? "Generating..." : "Generate"}
          </button>
        </div>
        <div className=" mt-10">
          <p className=" text-gray-400 text-[14px] mt-2">
            Once Created Your Amazing Design, You Can Share It With Our
            Community For Free
          </p>
          <button
            type="submit"
            className="font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 mt-3 text-white bg-[#6469ff]"
          >
            {loading ? "Sharing..." : "Share It With Community"}
          </button>
        </div>
      </form>
    </section>
  );
};

export default CreatePost;
